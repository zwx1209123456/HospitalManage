
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" charset="UTF-8" />
    <script src="~/js/jquery-1.11.0.min.js"></script>
    <script src="~/js/jquery-ui.min.js"></script>
    <script src="~/Scripts/axios.js"></script>
    <script src="~/Scripts/vue.js"></script>
    <link href="~/css/pag.css" rel="stylesheet" media="all" />
    <link href="~/css/css.css" rel="stylesheet" media="all" />
    <script src="~/Scripts/bootstrap.min.js"></script>
    <link href="~/css/x-admin.css" rel="stylesheet" media="all" />
    <script src="~/js/jquery-ui.js"></script>
    <script src="~/js/tabTime.js"></script>
    <style>
        tr {
            cursor: pointer;
        }
    </style>
    <script>
        //body加载事件
        function init() {
            vm.addProp();

        }
    </script>
</head>
<body style="background-color:#ffffff" @*onload="init()"*@>
  
    <div id="app" class="x-body">
        <div>
            <span class="leftspan"  style="color:aqua;width:60px;height:18px;background-color:darkgray;font-size:24px"onclick="reducedate()"><</span>
            <label id="beginTime" class="kbtn" style="font-size:24px" @*onchange="load()"*@>{{getNowFormatDate().replace(/-/g, "/")}}</label>
            @*<input  id="beginTime" class="kbtn" style="font-size:24px" type="text" :value="ChangeDateFormat(opeTime).replace(/-/g, '/')"/>*@
            <span class="rightspan" style="color:aqua;width:60px;height:18px;background-color:darkgray;font-size:24px"onclick="adddate()">></span>
        </div>
        <ul class="toolbar">
            <li><a href="#" onclick="location.href='/Arrangeoperation/Add'"><span><img src="~/images/t01.png" /></span>添加</a></li>
            <li v-if="statuss==0"><span onclick="location.href='/ToArrOperation/Index'"><img src="~/images/t09.png" />排班</span></li>
            <li v-if="statuss==0"><span v-on:click="publish()"><img src="~/images/t09.png" />发布</span></li>
            <li v-else><span v-on:click="publishCancel()"><img src="~/images/t03.png" />取消发布</span></li>
            <li v-if="statuss!=0"><input type="text" name="" placeholder="发布状态：已发布" autocomplete="off" class="layui-input"></li>
            <li v-else><input type="text" name="Status" placeholder="发布状态：未发布" autocomplete="off" class="layui-input"></li>
            <li><span><img src="~/images/t02.png" /></span>导出</li>

        </ul>
       
        <table class="tablelist" id="sort" >
            <thead>
                <tr>
                    <th>手术间</th>
                    <th class="index">台次</th>
                    <th>病区</th>
                    <th>手术名称</th>
                    <th>主刀医生</th>
                    <th>器械</th>
                    <th>巡回</th>
                    <th>麻醉师</th>
                    <th>患者姓名</th>
                    <th>年龄</th>
                    <th>性别</th>
                </tr>
            </thead>
            <tbody @*id="x-link"*@>
                <tr :id="contact.Id" class="operationInfo" v-on:mousedown="clickfun" v-for="(contact,key,index) in OperationList" v-bind:ifProp="contact.OperationNames">

                    <td v-if="contact.Status==0">
                        <select :id="contact.OperationID" :name="contact.Id" v-on:change="opChang" v-on:click="opStart" v-model="contact.OperationID" lay-verify="required" @*name="cid"*@ class="layui-input" style="width:96px;float:left">
                            <option v-for="opItem in Operationss" v-bind:value="opItem.Id">{{opItem.OperationName}}</option>
                            @*//v-bind:value="classes.id" v-on:input="id=$event.target.value"*@
                        </select>
                    </td>
                    <td v-else :id="contact.OperationID">{{contact.OperationNames}}</td>
                    <td @*:id="contact.Id"*@ :class="contact.OperationNames" @*v-on:mousedown="clickfun"*@ style="color:red"  :chooseProp="contact.Id">{{contact.Were}}</td>
                    <td :id="contact.DepartmentID">{{contact.DepartmentName}}</td>
                    <td>{{contact.OperationName}}</td>
                    <td>{{contact.OperatorDoctor}}</td>
                    <td>{{contact.Instrument}}</td>
                    <td>{{contact.Tour}}</td>
                    <td>{{contact.Anesthetist}}</td>
                    <td>{{contact.PatientName}}</td>
                    <td>{{contact.PatientAge}}</td>
                    <td>{{contact.PatientSex}}</td>
                </tr>
            </tbody>
        </table>
    </div>

    <script>
        //localStorage.time="";
        /*添加*/
        function new_add(title, url, w, h) {
            x_admin_show(title, url, w, h);
        }
        // 编辑
        function data_management_look(title, url, id, w, h) {
            x_admin_show(title, url, w, h);
        }
        $('.tablelist tbody tr:odd').addClass('odd');
    </script>
    <script>
        var vm = new Vue({
            el: "#app",
            data: {
                Operationss:[],
                OperationList: [],
                OperationNames: "",
                OpeList: [],
                upId: 0,
                statuss: 0,
                publishTime: "",
                opeTime: "",
                upIf: 0,
                were: 0,
                id: 0,
                opStartId: 0,
                opId:0
            },
            mounted() {
                this.getNowFormatDate();
                this.GetOperation();
                this.ShowOperation();
            },
            methods: {
                //获取当前时间，格式YYYY-MM-DD
                getNowFormatDate:   function () {
                    var date = new Date();
                    var seperator1 = "-";
                    var year = date.getFullYear();
                    var month = date.getMonth() + 1;
                    var strDate = date.getDate();
                    if(month >= 1 && month <= 9) {
                        month = "0" + month;
                        }
                       if (strDate >= 0 && strDate <= 9) {
                          strDate = "0" + strDate;
                         }
                        var currentdate = year + seperator1 + month + seperator1 + strDate;
                        return currentdate;
                     },
                addProp: function () {

                    //var tr = document.createElement("tr");
                    var tr = document.getElementsByTagName("tr");
                    for (var i = 0; i < this.OperationList.length; i++) {

                        var ifProp = this.OperationList[i].OperationNames;//用于确定行
                        tr[i + 1].setAttribute("ifProp", ifProp);//记得去除表头
                       
                        var chooseProp = this.OperationList[i].Id;//用于确定排序修改列
                        //alert("属性："+chooseProp);
                        tr[i + 1].cells[1].setAttribute("chooseProp", chooseProp);
                        //alert("属性：" + tr[i + 1].cells[1].getAttribute("chooseProp"));
                    }
                },
                opStart: function (e) {
                    var el = e.target;
                    var startId = $(el).prop("id");
                    //console.log("初始室：" + startId);
                    this.opStartId = startId;//修改原手术室排序用
                },
                opChang: function (e) {
                    //this.addProp();//用于判断是否跨手术室拖动
                    this.upIf = 3;//选择修改
                    var el = e.target;
                    this.opId = $(el).val();//修改变动后手术室排序用
                    var id = $(el).prop("name");
                    //alert("手术室："+opId);
                    //alert("总："+id);
                    this.OperationNames = $(el).parent().find("td:eq(1)").prop("class");//修改完，加载时，排序用
                    this.id = id;
                    this.OpChangeReWere(this.opId);
                },
                OpChangeReWere: function (id) {
                    var timeNow = $("#beginTime").html();
                        axios.post('@Url.Action("OpChangeReWere", "Arrangeoperation")', {
                            operationId: id, time: timeNow
                    }).then(
                            (response) => {
                                this.were = response.data;
                                //alert(111)
                               
                                this.updateOperation();

                        }
                    ).catch(function (response) {
                        alert(response);
                        });
                },
                clickfun: function (e) {
                    var el = e.target;
                    this.upIf = 0;
                    //重置台次排序时，值针对指定元素(鼠标按下事件放在tr，获取点中td)
                    var element = $(el).parent();
                    this.OperationNames = element.find("td:eq(1)").prop("class");
                    
                    //添加自定义属性，用于判断拖拽后，是否重载页面
                    //this.addProp();//————应该 加载完数据后，再加载（根数数据动态加入）——这里初始就需要属性确定是那一行，所以重载完数据后再重载一边属性就行
                    this.upId = element.prop("id");
                    //$("#sort tbody").on("sortstop", function (event, ui) {
                    //    vm.updateOperation();
                    //});
                  
                },
                ShowOperation: function () {
                      axios.get('@Url.Action("ShowOperation", "Arrangeoperation")'
                    ).then(
                        (response) => {
                            this.Operationss = [];
                            for (var i = 0; i < response.data.length; i++) {
                                this.Operationss.push(response.data[i]);
                            }
                            //console.log(this.Operationss);
                        },
                        (response) => {
                            alert(response.status);
                        }
                    ).catch(function (response) {
                        alert(response);
                    });
                },
                GetOperation: function () {
                    //var timeToShow = localStorage.time;//重载清空，存不住
                    //if (timeToShow== "") {
                    //    timeToShow = $("#beginTime").html();
                    //}
                    var timeToShow = $("#beginTime").html();
                   // alert(timeToShow);
                    var _this = this;
                    axios.post('@Url.Action("Shows", "Arrangeoperation")', { opTime: timeToShow}).then(
                        (response) => {
                            if (response.data.length!=0) {
                                    console.log(response.data)
                                    this.OperationList = response.data;
                                    //console.log(this.OperationList);
                                    this.statuss = this.OperationList[0].Status;
                                    this.publishTime = this.OperationList[0].publishTime;
                                    this.opeTime = this.OperationList[0].OpeTime;
                                    console.log(this.statuss)
                                    //console.log(this.opeTime)
                                    //console.log(this.publishTime)
                                    @*//拖动整行进行调整顺序*@
                                if (this.statuss == 0) {

                                    //setTimeout(function () {
                                    //    _this.scro();
                                    //}, 100);
                                   this.scro();//GetOperation重载数据，数据的变动会触发一次scro的重排序
                                    //(由于用于排序的 this.OperationNames没变，排序会比实际需求多排一位而出错，/*所以scro里 重载 与this.OperationNames对应的class属性*/)
                                    //，然后修改进入0, 0修改后不会重载数据，结束执行（所以更换手术间，前期可只修改手术间而不修改台次？？）
                                }
                                else {
                                    $("#sort tbody").sortable(
                                        { disabled: true }//排序不可用
                                    );
                                }
                                //this.addProp();//放在这里报错，找不到添加属性的方法
                            }
                            else {
                                this.OperationList = [];
                            }
                            },
                        
                        ).catch(function (response) {
                            alert(response);
                        });
                   
                },
                ChangeDateFormat(cellval) {

                    var date = new Date(parseInt(cellval.replace("/Date(", "").replace(")/", ""), 10));

                    var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;

                    var currentDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();

                    return date.getFullYear() + "-" + month + "-" + currentDate;

                },
                updateOperation: function () {
                    var static = this.statuss;
                    var time = this.publishTime;
                    var time2 = this.ChangeDateFormat(this.opeTime);
               
                    //alert("排序："+this.were)
                    //alert("总："+this.id)
                    $("[chooseProp='" + this.id+"']" ).text(this.were);//把新的排序号放入对应排序单元格，修改时获取
                    //alert($("[chooseProp='" + this.id + "']").text())
                 
                    var _this = this;
                    _this.OpeList = [];
                    $(".operationInfo").each(function () {//注意不能id选择器，因为只会选中一个
                        //取消发布
                        if (_this.upIf == 2) {
                            _this.OpeList.push({
                                Id: $(this).prop("id"), OperationID: this.cells[0].id, DepartmentID: this.cells[2].id, OperationName: this.cells[3].innerText, OperatorDoctor: this.cells[4].innerText, Instrument: this.cells[5].innerText, Tour: this.cells[6].innerText, Anesthetist: this.cells[7].innerText,
                                PatientName: this.cells[8].innerText, PatientAge: this.cells[9].innerText, PatientSex: this.cells[10].innerText, OperationNames: this.cells[0].innerText, DepartmentName: this.cells[2].innerText,
                                Status: 0, Were: this.cells[1].innerText, OpeTime: time2, publishTime: time
                            });
                            //_this.upIf = 0;
                        }
                        //发布
                        if (_this.upIf == 1) {
                            _this.OpeList.push({
                                Id: $(this).prop("id"), OperationID: this.cells[0].firstElementChild.value, DepartmentID: this.cells[2].id, OperationName: this.cells[3].innerText, OperatorDoctor: this.cells[4].innerText, Instrument: this.cells[5].innerText, Tour: this.cells[6].innerText, Anesthetist: this.cells[7].innerText,
                                PatientName: this.cells[8].innerText, PatientAge: this.cells[9].innerText, PatientSex: this.cells[10].innerText, OperationNames: this.cells[0].firstElementChild.text, DepartmentName: this.cells[2].innerText,
                                Status: 1, Were: this.cells[1].innerText, OpeTime: time2, publishTime: time
                            });
                        }
                        //排序
                        if (_this.upIf == 0) {
                            _this.OpeList.push({
                                Id: $(this).prop("id"), OperationID: this.cells[0].firstElementChild.value, DepartmentID: this.cells[2].id, OperationName: this.cells[3].innerText, OperatorDoctor: this.cells[4].innerText, Instrument: this.cells[5].innerText, Tour: this.cells[6].innerText, Anesthetist: this.cells[7].innerText,
                                PatientName: this.cells[8].innerText, PatientAge: this.cells[9].innerText, PatientSex: this.cells[10].innerText, OperationNames: this.cells[0].firstElementChild.text, DepartmentName: this.cells[2].innerText,
                                Status: 0, Were: this.cells[1].innerText, OpeTime: time2, publishTime: time
                            });
                        }
                        //换手术室
                        if (_this.upIf == 3) {
                            _this.OpeList.push({
                                Id: $(this).prop("id"), OperationID: this.cells[0].firstElementChild.value, DepartmentID: this.cells[2].id, OperationName: this.cells[3].innerText, OperatorDoctor: this.cells[4].innerText, Instrument: this.cells[5].innerText, Tour: this.cells[6].innerText, Anesthetist: this.cells[7].innerText,
                                PatientName: this.cells[8].innerText, PatientAge: this.cells[9].innerText, PatientSex: this.cells[10].innerText, OperationNames: this.cells[0].firstElementChild.text, DepartmentName: this.cells[2].innerText,
                                Status: 0, Were: this.cells[1].innerText, OpeTime: time2, publishTime: time
                            });
                        }
                    })

                    axios.post('@Url.Action("Update", "Arrangeoperation")', {
                        operations: this.OpeList, opSId: this.opStartId, opEId: this.opId
                    }).then(
                        (response) => {
                            //发布和取消发布时，重新加载数据，改变页面布局（修改排序时则不，否则会有buge）
                            if (this.upIf != 0) {
                                 //this.GetOperation();
                                location.reload(true);
                            }
                        }
                    ).catch(function (response) {
                        alert(response);
                    })

                },
                publish: function () {
                    var timeOpe = new Date(this.ChangeDateFormat(this.opeTime)).getDate();
                    var timeNow = new Date().getDate();
                    var dayDif = timeOpe- timeNow;
                    console.log(dayDif);
                    if (dayDif == 1) {
                        this.upIf = 1;
                        this.publishTime = this.getNowFormatDate();
                        this.updateOperation(); 
                    }
                    else {
                        alert("只能发布第二天班次");
                    }            
                },
                //获取天数差  可用
                //dateDiff: function (sDate1) {
                //    var date2 = new Date();//当前时间
                //    var date1 = new Date(Date.parse(sDate1.replace(/-/g, "/")));
                //    console.log(date2);
                //    console.log(date1);
                //    var iDays = parseInt(Math.abs(date2.getTime() - date1.getTime()) / 1000 / 60 / 60 / 24);
                //    return iDays;
                //},
                publishCancel: function () {
                    //var time = new Date(this.ChangeDateFormat(this.publishTime));
                    //var _this = this;
                    //Date.prototype.DateDiff = function (strInterval, dtStart) {
                    //    var dtEnd = new Date();//当前时间

                    //    switch (strInterval) {
                    //        case 's': return parseInt((dtEnd - dtStart) / 1000);
                    //        case 'n': return parseInt((dtEnd - dtStart) / 60000);
                    //        case 'h': return parseInt((dtEnd - dtStart) / 3600000);
                    //        case 'd': return parseInt((dtEnd - dtStart) / 86400000);
                    //        case 'w': return parseInt((dtEnd - dtStart) / (86400000 * 7));
                    //        case 'm': return (dtEnd.getMonth() + 1) + ((dtEnd.getFullYear() - dtStart.getFullYear()) * 12) - (dtStart.getMonth() + 1);
                    //        case 'y': return dtEnd.getFullYear() - dtStart.getFullYear();
                    //    }
                    //}
                    //var yDiff = Date.prototype.DateDiff('y', time);
                    //var mDiff = Date.prototype.DateDiff('m', time);
                    //var dDiff = Date.prototype.DateDiff('d', time);
                    //console.log(yDiff + "," + mDiff + "," + dDiff);
                    //if (yDiff >= 0 && mDiff >= 0 && dDiff>0) {

                    //}
                    //var time = this.ChangeDateFormat(this.publishTime);
                    //var dayDif = this.dateDiff(time);

                    var timePub = new Date(this.ChangeDateFormat(this.publishTime)).getDate();
                    var timeNow = new Date().getDate();
                    var dayDif = timeNow - timePub;
                    console.log(dayDif);
                    if (dayDif==0) {
                        this.upIf = 2;
                        this.publishTime = this.ChangeDateFormat(this.publishTime);
                        this.updateOperation();
                    }
                    else {
                        alert("当前班次不能取消");
                    }
                },
                scro: function () {
           
                    var _this = this;
                    var fixHelperModified = function (e, tr) {
                        //preProp = tr.prev().prop("ifProp");
                        //nextProp = tr.next().prop("ifProp");
                        var $originals = tr.children();
                        var $helper = tr.clone();
                        $helper.children().each(function (index) {
                            $(this).width($originals.eq(index).width())
                        });
                        return $helper;
                    },
                        updateIndex = function (e, ui) {
                            var upItem = _this.OperationNames;

                            $('td.' + upItem, ui.item.parent()).each(function (i) {//手术室改变后，数据更新还未完成，排序已完成？？？
                                $(this).html(i + 1);
                            });

                            vm.updateOperation();
                            var preProp = $("#" + vm.upId).prev().attr("ifProp");
                            var nextProp = $("#" + vm.upId).next().attr("ifProp");

                            if (upItem != preProp && upItem != nextProp) {
                                location.reload(true);
                            }

                        };
                    //***************拖拽换的是内容，列不变****************
                    $("#sort tbody").sortable({
                        disabled: false,
                        helper: fixHelperModified,
                        stop: updateIndex
                    }).disableSelection();
                }
            }
        })
    </script>


</body>
</html>
