
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>接龙设置</title>
    <meta name="renderer" content="webkit">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="format-detection" content="telephone=no">
    <link rel="stylesheet" href="~/css/x-admin.css" media="all">
    <link rel="stylesheet" href="~/css/pag.css" media="all">

    <script src="~/Scripts/vue.js"></script>
    <script src="~/Scripts/axios.js"></script>
    <script src="~/Scripts/jquery-3.3.1.js"></script>
    <script src="~/js/My97DatePicker/My97DatePicker/WdatePicker.js"></script>
</head>

<body>
    <div id="app" class="x-body">
        <div style="margin:0 auto">
            <div>
                <span style="float:left;margin-right:20px">接龙班次</span>
                <select v-model="id" lay-verify="required" name="cid" class="layui-input" style="width:66px;float:left">
                    <option v-for="classes in classesList" v-bind:value="classes.Id">{{classes.ClassesName}}</option>
                    @*//v-bind:value="classes.id" v-on:input="id=$event.target.value"*@
                </select>
            </div>
            <div style="margin-left:500px">
                <span style="float:left;margin-right:20px">接龙周期</span>
                <div style="float:left">
                    @*<div><span style="background-color:darkviolet">开始时间</span><input id="Text1" type="text" onclick="WdatePicker()" v-on:change="getstartTime()" v-model="startTime" /></div>
        <div><span style="background-color:aquamarine">结束时间</span><input id="Text1" type="text" onclick="WdatePicker()" v-on:change="getendTime()" v-model="endTime" /></div>*@
                    <div><span style="background-color:darkviolet">开始时间</span><input id="startTime" type="text" onclick="WdatePicker()" /></div>
                    <div><span style="background-color:aquamarine">结束时间</span><input id="endTime" type="text" onclick="WdatePicker()" /></div>

                </div>
            </div>
        </div>
        <div style="margin-top:150px">
            <table class="tablelist" border="1">
                <thead>
                    <tr>  <th colspan="4" style="text-align:center">组员设置</th></tr>
                    <tr>

                        <th>组序</th>
                        <th> 人员 </th>
                        <th> 组长</th>
                        <th> </th>

                    </tr>
                </thead>
                <tbody id="tbl">
                    <tr :id="chainsGroup.SortNumber" class="groupInfo" v-for="(chainsGroup,index) in chainsGroupList">
                        <td>{{chainsGroup.SortNumber}}</td>
                        
                        <td v-on:click="user_management_edit('人员设置', '/Solitaire/AddMember?id='+chainsGroup.SortNumber, '800', '500')">
                            @*<input  type="text"    />*@
                        </td>
                        <td v-if="chainsGroup.GropCrew!=''">

                            <select  lay-verify="required" name="cid" class="layui-input" >
                                <option v-for="gropCrewx in chainsGroup.GropCrew.split(',')" v-bind:value="gropCrewx">{{gropCrewx}}</option>
                            </select>
                        </td>
                        <td v-else ><input id="Hidden1" type="hidden" v-model="chainsGroup.GroupLeader" value="chainsGroup.GroupLeader"/></td>
                        <td v-on:click="addRow(id)">+</td>
                    </tr>

                </tbody>
            </table>
        </div>
        <div style="width:200px;margin:50px auto">
            <button class="layui-btn" v-on:click="addChains()"> 保存 </button>
            <button class="layui-btn" style="float:right" onclick="cancel()"> 取消 </button>

        </div>
    </div>
    <script src="~/lib/layui/layui.js" charset="utf-8">
    </script>
    <script src="~/js/x-layui.js" charset="utf-8">
    </script>
    <script>
        layui.use(['form', 'layer'], function () {
            $ = layui.jquery;
            var form = layui.form()
                , layer = layui.layer;
        });
        //function user_management_edit(title, url, w, h) {
        //    x_admin_show(title, url, w, h);
        //}
        function setChooseValues(ref, indexId) {

           localStorage.ids = ref;
           //alert(localStorage.ids);
            //alert(indexId);
            //$("#" + indexId).children("td").eq(1).children().eq(0).val(localStorage.ids);
            $("#" + indexId).children("td").eq(1).text(localStorage.ids);
            vm.ChooseValues(indexId);
        }

        function cancel() {
            var index = parent.layer.getFrameIndex(window.name);
            parent.layer.close(index); 
        }
    </script>


    <script type="text/javascript">
       
        var vm = new Vue({
            el: "#app",
            data: {
               
                sortNumber:1,
                classesList: [],             
                chainsGroupList: [{ Id: "", GroupLeader: "", GropCrew: "", ClassesId: 0, SortNumber: 1 }],
                //gropCrewList: [],
                groupList: [],
                SortNumber: 1,         
                GropCrew: "",
                GroupLeader: "",
                id: 1,
          
            },
            //computed: {//计算属性_——计算属性一定要return一个值，这个值存在属性里。计算属性和data属性可以简单的理解为数据的不同形式。
            //    gropCrewList: function () {
            //        return this.GropCrew.split(',')
            //    }
            //},
            mounted() {
                this.load();
                
                this.getClassesList();
            },
            methods: {
         
                user_management_edit(title, url, w, h) {
                    console.log(url);
                    x_admin_show(title, url, w, h);
                },
                load: function () {
                    localStorage.ids = "";
                    this.GropCrew = "";
                    //alert(localStorage.ids);
                    //alert(this.GropCrew);
                },
                ChooseValues: function (rowNumber) {
                 
                    if (localStorage.ids != null) {
                        this.GropCrew = localStorage.ids;
                        var groupIndex = rowNumber-1;
                        this.chainsGroupList[groupIndex].GropCrew = localStorage.ids;
                        
                    }
               
                },
                addRow: function (classesId) {
                    this.sortNumber += 1;
                    this.chainsGroupList.push({ Id: "", GroupLeader: "", GropCrew: "", ClassesId: classesId, SortNumber: this.sortNumber });
                },
                getClassesList: function () {
                     axios.get('@Url.Action("ClassesList", "Solitaire")'
                    ).then(
                        (response) => {
                            this.classesList = [];
                            for (var i = 0; i < response.data.length; i++) {
                                this.classesList.push(response.data[i]);
                            }

                        },
                        (response) => {
                            alert(response.status);
                        }
                    ).catch(function (response) {
                        alert(response);
                    });
                },

                addChains: function () {
                    var _this = this;
                    $(".groupInfo").each(function () {//注意不能id选择器，因为只会选中一个

                        _this.groupList.push({ SortNumber: this.cells[0].innerText, ClassesId: _this.id, GropCrew: this.cells[1].innerText, GroupLeader: this.cells[2].firstElementChild.value });
                
                    });
                    var startTime = $("#startTime").val();
                    var endTime = $("#endTime").val();
                   
                    axios.post('@Url.Action("AddChains", "Solitaire")', {
                        solitaire: { ClassesId: _this.id, StartSolitaire: startTime, LastStartSolitaire: endTime },
                        chainsGroups: this.groupList
                    }).then(
                        (response) => {
                            parent.setChainsList(response.data)
                        }
                    ).catch(function (response) {
                        alert(response);
                        });
                 
                    var index = parent.layer.getFrameIndex(window.name);
                    parent.layer.close(index); 
                },

                getAllSolitaires: function () {
                    axios.get('@Url.Action("SelectSolitaire", "Solitaire")'
                    ).then(
                        (response) => {
                            this.SolitaireList = [];
                            for (var i = 0; i < response.data.length; i++) {
                                this.SolitaireList.push(response.data[i]);
                            }
                            this.SolitaireList.push({ Id: "", SolitaireName: "" });
                        },
                        (response) => {
                            alert(response.status);
                        }
                    ).catch(function (response) {
                        alert(response);
                    });
                },

                updateSolitaire: function (id, name) {
                    axios.post('@Url.Action("UpdateSolitaire", "Solitaire")', { Solitaire: { Id: id, SolitaireName: name} }).then(
                        (response) => {
                            this.SolitaireList = [];
                            for (var i = 0; i < response.data.length; i++) {
                                this.SolitaireList.push(response.data[i]);
                            }
                            this.SolitaireList.push({ Id: "", SolitaireName: ""});
                        },
                        (response) => {
                            alert(response.status);
                        }
                    ).catch(function (response) {
                        alert(response);
                    });
                },
                deleteSolitaireById: function (id) {
                    axios.post('@Url.Action("DelSolitaire", "Solitaire")', { id: id }).then(
                        (response) => {
                            this.SolitaireList = [];
                            for (var i = 0; i < response.data.length; i++) {
                                this.SolitaireList.push(response.data[i]);
                            }
                            this.SolitaireList.push({ Id: "", SolitaireName: "" });
                        },
                        (response) => {
                            alert(response.status);
                        }
                    ).catch(function (response) {
                        alert(response);
                    });
                }
            }
        })
    </script>
</body>
</html>