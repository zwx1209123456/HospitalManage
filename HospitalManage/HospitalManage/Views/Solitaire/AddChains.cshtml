
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>接龙设置</title>
    <meta name="renderer" content="webkit">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="format-detection" content="telephone=no">
    <link rel="stylesheet" href="~/css/x-admin.css" media="all">
    <link rel="stylesheet" href="~/css/pag.css" media="all">

    <script src="~/Scripts/vue.js"></script>
    <script src="~/Scripts/axios.js"></script>
    <script src="~/Scripts/jquery-3.3.1.js"></script>
    <script src="~/js/My97DatePicker/My97DatePicker/WdatePicker.js"></script>
</head>

<body>
    <div id="app" class="x-body">
        <div  style="margin:0 auto">
            <div >
                <span style="float:left;margin-right:20px">接龙班次</span>
                <select v-model="id"  lay-verify="required" name="cid" class="layui-input" style="width:66px;float:left" >
                    <option v-for="classes in classesList" v-bind:value="id" v-on:input="id=$event.target.value">{{classes.ClassesName}}</option>

                </select>
            </div>
            <div style="margin-left:500px">
                <span style="float:left;margin-right:20px">接龙周期</span>
                <div style="float:left">
                    <div><span style="background-color:darkviolet">开始时间</span><input id="Text1" type="text" onclick="WdatePicker()"  v-model="startTime"/></div>
                    <div><span style="background-color:aquamarine">结束时间</span><input id="Text1" type="text" onclick="WdatePicker()"  v-model="endTime"/></div>
                    
                </div>
            </div>
        </div>
        <div style="margin-top:150px">
            <table class="tablelist" border="1">
                <thead>
                    <tr>  <th colspan="4" style="text-align:center">组员设置</th></tr>
                    <tr>

                        <th>组序</th>
                        <th> 人员 </th>
                        <th> 组长</th>
                        <th> </th>

                    </tr>
                </thead>
                <tbody>
                    <tr id="groupInfo" v-for="(chainsGroup,index) in chainsGroupList">
            <td ><input ref="q1" type="text" v-model="chainsGroup.SortNumber" /></td>
            <td onclick="user_management_edit('人员设置','/Solitaire/AddMember','800','500')">
                <input ref="q2" type="text" v-model="chainsGroup.GropCrew" />
            </td>
            <td v-if="gropCrewList.length!=0">

                <select ref="q3" lay-verify="required" name="cid" class="layui-input" v-model="chainsGroup.GroupLeader" >
                    <option v-for="gropCrewx in gropCrewList" v-bind:value="gropCrewx">{{gropCrewx}}</option>
                </select>
            </td>
            <td v-else></td>
            <td v-on:click="addRow(id)">+</td>
        </tr>
                    
                </tbody>
            </table>
        </div>
        <div style="width:200px;margin:50px auto" >
            <button class="layui-btn" v-on:click="addChains(id,startTime,endTime)"> 保存 </button>
            <button class="layui-btn" style="float:right"> 取消 </button>
        </div>
    </div>
    <script src="~/lib/layui/layui.js" charset="utf-8">
    </script>
    <script src="~/js/x-layui.js" charset="utf-8">
    </script>
    <script>
        layui.use(['form', 'layer'], function () {
            $ = layui.jquery;
            var form = layui.form()
                , layer = layui.layer;
        });
        function user_management_edit(title, url, w, h) {
            x_admin_show(title, url, w, h);
        }
    </script>


    <script type="text/javascript">
        var vm = new Vue({
            el: "#app",
            data: {
                sortNumber:1,
                
                classesList: [],
                chainsGroupList: [{ Id: "", GroupLeader: "", GropCrew: "", ClassesId: 0, SortNumber: 1 }],
                gropCrewList: [],
                groupList: [],
                SortNumber: 0,
                GropCrew: "",
                GroupLeader: "",
                id: "",
                startTime: "",
                endTime:""
            },
            mounted() {
            
                this.getClassesList();
            },
            methods: {
                //addChainsGroupList:function () {
                //    this.chainsGroupList.push({ Id: "", GroupLeader: "", GropCrew: "", ClassesId: 0, SortNumber: 1});
                //},
                addRow: function (classesId) {
                    this.sortNumber += 1;
                    this.chainsGroupList.push({ Id: "", GroupLeader: "", GropCrew: "", ClassesId: classesId, SortNumber: this.sortNumber });
                },
                getClassesList: function () {
                     axios.get('@Url.Action("ClassesList", "Solitaire")'
                    ).then(
                        (response) => {
                            this.classesList = [];
                            for (var i = 0; i < response.data.length; i++) {
                                this.classesList.push(response.data[i]);
                            }
                           
                        },
                        (response) => {
                            alert(response.status);
                        }
                    ).catch(function (response) {
                        alert(response);
                    });
                },
                addChains: function (id, startTime, endTime) {
                    var _this = this;
                    $("#groupInfo").each(function () {

                        for (var j = 0; j < this.cells.length; j++) {
                            var groupLeader = "";

                            if (false) {
                                groupLeader = _this.$refs.q3[j].value;
                            }
                            _this.groupList.push({ SortNumber: _this.$refs.q1[j].value, GropCrew: _this.$refs.q2[j].value, GroupLeader: groupLeader  });
                        }
                      
                    });
                    axios.post('@Url.Action("AddSolitaire", "Solitaire")', {
                        solitaire: { ClassesId: id, StartSolitaire: startTime, LastStartSolitaire: endTime },
                        chainsGroups: this.groupList
                    }).then(
                        (response) => {
                            this.SolitaireList = [];
                            for (var i = 0; i < response.data.length; i++) {
                                this.SolitaireList.push(response.data[i]);
                            }
                            this.SolitaireList.push({ Id: "", SolitaireName: "" });
                        },
                        (response) => {
                            alert(response.status);
                        }
                    ).catch(function (response) {
                        alert(response);
                    });
                },
                getAllSolitaires: function () {
                    axios.get('@Url.Action("SelectSolitaire", "Solitaire")'
                    ).then(
                        (response) => {
                            this.SolitaireList = [];
                            for (var i = 0; i < response.data.length; i++) {
                                this.SolitaireList.push(response.data[i]);
                            }
                            this.SolitaireList.push({ Id: "", SolitaireName: "" });
                        },
                        (response) => {
                            alert(response.status);
                        }
                    ).catch(function (response) {
                        alert(response);
                    });
                },
            
                updateSolitaire: function (id, name) {
                    axios.post('@Url.Action("UpdateSolitaire", "Solitaire")', { Solitaire: { Id: id, SolitaireName: name} }).then(
                        (response) => {
                            this.SolitaireList = [];
                            for (var i = 0; i < response.data.length; i++) {
                                this.SolitaireList.push(response.data[i]);
                            }
                            this.SolitaireList.push({ Id: "", SolitaireName: ""});
                        },
                        (response) => {
                            alert(response.status);
                        }
                    ).catch(function (response) {
                        alert(response);
                    });
                },
                deleteSolitaireById: function (id) {
                    axios.post('@Url.Action("DelSolitaire", "Solitaire")', { id: id }).then(
                        (response) => {
                            this.SolitaireList = [];
                            for (var i = 0; i < response.data.length; i++) {
                                this.SolitaireList.push(response.data[i]);
                            }
                            this.SolitaireList.push({ Id: "", SolitaireName: "" });
                        },
                        (response) => {
                            alert(response.status);
                        }
                    ).catch(function (response) {
                        alert(response);
                    });
                }
            }
        })
    </script>
</body>
</html>